<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Home</title>
    <link>www.ninerdelta.com/tags/unity/</link>
    <description>Recent content in Unity on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Jun 2018 22:18:28 -0700</lastBuildDate><atom:link href="www.ninerdelta.com/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unity Journal 6 - Entity Component Systems</title>
      <link>www.ninerdelta.com/post/2018/06/05/unity-journal-6-entity-component-systems/</link>
      <pubDate>Tue, 05 Jun 2018 22:18:28 -0700</pubDate>
      
      <guid>www.ninerdelta.com/post/2018/06/05/unity-journal-6-entity-component-systems/</guid>
      <description>No actual Unity reading material but inspired by new features in coming out in 2018
3 Big Lies, or Why Data Oriented?
 Despite the many layers of abstraction, code still runs on hardware and thus, not all data layouts are equal Code modelled after the real world does not actuall add value &amp;ldquo;Real world objects&amp;rdquo; approach does not scale, every instance costs the same instead of leveraging economies of scale Code is ephemeral and has no actual value in and of itself, the data and the data transformation are valuable  ECS Overview</description>
    </item>
    
    <item>
      <title>Unity Journal 5 - shaders</title>
      <link>www.ninerdelta.com/post/2018/04/23/unity-journal-5-shaders/</link>
      <pubDate>Mon, 23 Apr 2018 23:26:11 -0700</pubDate>
      
      <guid>www.ninerdelta.com/post/2018/04/23/unity-journal-5-shaders/</guid>
      <description>test</description>
    </item>
    
    <item>
      <title>Unity Journal 4 - native plugins</title>
      <link>www.ninerdelta.com/post/2018/04/10/unity-journal-4-native-plugins/</link>
      <pubDate>Tue, 10 Apr 2018 01:50:15 -0700</pubDate>
      
      <guid>www.ninerdelta.com/post/2018/04/10/unity-journal-4-native-plugins/</guid>
      <description>Integrating Native iOS code
 Create bridge in C Build as framework Unity C# calls into bridge code Pass C# delegate to C as function pointer, allows native to call into C# w/o UnitySendMessage  C++ Scripting - part 1
 Hooks from C++ into C# via Marshal.GetFunctionPointerForDelegate Handles to managed types (e.g. GameObject) enables more sophisticated usage In a way, Unity/C# becomes implementation of a C++ interface  Native UI Overlay for Unity (Android)</description>
    </item>
    
    <item>
      <title>Unity Journal 3 - best practices, software engineering</title>
      <link>www.ninerdelta.com/post/2018/01/29/unity-journal-3-best-practices-software-engineering/</link>
      <pubDate>Mon, 29 Jan 2018 22:11:59 -0800</pubDate>
      
      <guid>www.ninerdelta.com/post/2018/01/29/unity-journal-3-best-practices-software-engineering/</guid>
      <description>50 Tips and Best Practices
 Learn to use coroutines effectively  parallel, series, custom   Avoid using different idioms to do the same thing Use singletons for convenience  mainly useful for &amp;ldquo;manager&amp;rdquo; objects define static properties &amp;amp; methods to enable &amp;ldquo;Manager.player&amp;rdquo; and avoid having to use &amp;ldquo;Manager.Instance.player&amp;rdquo;   Learn how to use debugging facilities effectively  Make use of third party extensions as well    Automated Build Pipeline Case Study - GoodbyeWorld Games</description>
    </item>
    
    <item>
      <title>Unity Journal 2 - C#, .NET, IL2CPP</title>
      <link>www.ninerdelta.com/post/2018/01/22/unity-journal-2-c#-.net-il2cpp/</link>
      <pubDate>Mon, 22 Jan 2018 22:03:58 -0800</pubDate>
      
      <guid>www.ninerdelta.com/post/2018/01/22/unity-journal-2-c#-.net-il2cpp/</guid>
      <description>What is Managed and Unmanaged Code?
 Managed code runs in the Common Language Runtime (CLR) and compiles to an intermediate language (IL) Unmanaged is outside the CLR, and compile directly to native machine code  Unity Scripting Backend
 Replacing Mono with in house .NET runtime IL2CPP Generates C++ source code from assemblies, then relies on existing C++ compilers to create native binaries Virtual Machine (VM) provides extra such as Garbage Collection (GC), metadata, and platform specific resources Leverages existing compilers and removes effort in porting Mono to every platform IL2CPP will fast forward Unity to modern .</description>
    </item>
    
    <item>
      <title>Unity Journal 1 - serialization, git, ScriptableObjects</title>
      <link>www.ninerdelta.com/post/2018/01/13/unity-journal-1-serialization-git-scriptableobjects/</link>
      <pubDate>Sat, 13 Jan 2018 13:24:48 -0800</pubDate>
      
      <guid>www.ninerdelta.com/post/2018/01/13/unity-journal-1-serialization-git-scriptableobjects/</guid>
      <description>How to Git with Unity
 Configure .gitignore Relevent Unity Editor settings Setup Git Large File Storage (LFS)  Unity Tutorials - Intro to Scriptable Objects
 Can be used without attaching to a GameObject Saved as assets (good for version control!) Helps with memory management by storing references to data instead of copies  Unity Blog - Making cool stuff with ScriptableObjects
 Asset to hold custom data, or execute code Enables a very &amp;ldquo;pluggable architecture&amp;rdquo; Unity is a C++ engine with a .</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Home</title><link>https://ninerdelta.com/post/</link><description>Recent content in Posts on Home</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Dec 2020 01:19:23 -0600</lastBuildDate><atom:link href="https://ninerdelta.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Win X64 Asm 1</title><link>https://ninerdelta.com/post/2020/12/16/win-x64-asm-1/</link><pubDate>Wed, 16 Dec 2020 01:19:23 -0600</pubDate><guid>https://ninerdelta.com/post/2020/12/16/win-x64-asm-1/</guid><description>Intro I&amp;rsquo;m working through the book &amp;ldquo;Windows 64-bit Assembly Language Programming&amp;rdquo; and taking some notes.
My first notes are about environment setup, and working on Chapter 3 &amp;ldquo;Hello World&amp;rdquo;.
A few tutorials I&amp;rsquo;ve seen use assemblers like FASM or NASM, but the book uses ML64 so that is what I used as well.
Setup To get setup with ML64 the book recommended searching for ml64.exe and adding it to the path.</description></item><item><title>Graphics Dev Journal 1</title><link>https://ninerdelta.com/post/2018/06/27/graphics-dev-journal-1/</link><pubDate>Wed, 27 Jun 2018 19:46:16 -0700</pubDate><guid>https://ninerdelta.com/post/2018/06/27/graphics-dev-journal-1/</guid><description>A Journey Through Space Transformations NOTE: THIS POST CONTAINS MATH ERRORS (12/14/2020)
Say the point p0 is in object space and its coordinates are {0, 2, 0, 1} so just a point on the Y axis.
p0 is placed in world space by a model transformation shown in Figure 1, that is, no rotation, just translated along Z axis by 5 units.
The camera is sitting at the origin of world space but &amp;ldquo;looking&amp;rdquo; down the -Z axis, so the camera&amp;rsquo;s location in world space is c0 = {0, 0, 0, 1} and its coordinate system can be represented as shown in Figure 2, and then combining its location and coordinate system into view matrix also shown in Figure 2</description></item><item><title>Unity Journal 6 - Entity Component Systems</title><link>https://ninerdelta.com/post/2018/06/05/unity-journal-6-entity-component-systems/</link><pubDate>Tue, 05 Jun 2018 22:18:28 -0700</pubDate><guid>https://ninerdelta.com/post/2018/06/05/unity-journal-6-entity-component-systems/</guid><description>No actual Unity reading material but inspired by new features in coming out in 2018
3 Big Lies, or Why Data Oriented?
Despite the many layers of abstraction, code still runs on hardware and thus, not all data layouts are equal Code modelled after the real world does not actuall add value &amp;ldquo;Real world objects&amp;rdquo; approach does not scale, every instance costs the same instead of leveraging economies of scale Code is ephemeral and has no actual value in and of itself, the data and the data transformation are valuable ECS Overview</description></item><item><title>Android Journal 1 - Design Patterns</title><link>https://ninerdelta.com/post/2018/05/21/android-journal-1-design-patterns/</link><pubDate>Mon, 21 May 2018 22:36:33 -0700</pubDate><guid>https://ninerdelta.com/post/2018/05/21/android-journal-1-design-patterns/</guid><description>Android App Architecture Guidelines
Rigorously define boundaries between modules Design lean interfaces e.g. don&amp;rsquo;t expose more functionality than needed Design for offline functionality Spend time on what counts, not on reinventing the wheel The MVVM Pattern
Three core components - model, view, view model (MVVM!) Motivation is separation of concerns and increased testability Leverages data binding, where view is updated via event &amp;ldquo;observers&amp;rdquo; or subscribers Decoupling UI (view) from logic enables more flexibility/iteration for design Comparison of Architectures</description></item><item><title>AR Journal 1 - History</title><link>https://ninerdelta.com/post/2018/05/01/ar-journal-1-history/</link><pubDate>Tue, 01 May 2018 02:09:57 -0700</pubDate><guid>https://ninerdelta.com/post/2018/05/01/ar-journal-1-history/</guid><description>Depth Cameras For Mobile AR
Four primary types, Passive Stereo, Active Stereo, Structured Light, Time of Flight Must have very small form factor to be useful on mobile, and operate with limited computing resources Range (distance) of operation from gesture recognition to environmental scanning requires tradeoffs Primarily limited to indoors The History of Mobile AR 1968 - 2009
1968 Ivan Sutherland&amp;rsquo;s Sword of Damocles VR HMD 1973 Motorola demos the first mobile phone 1993 NAVSTAR GPS launched 1994 Reality-Virtuality continuum and augmented reality formally defined 1997 Philippe Kahn shares the first picture taken by a phone (he invented the camera phone) 1999 ARToolKit is presented and available as open source 2007 iPhone is released!</description></item><item><title>Unity Journal 5 - shaders</title><link>https://ninerdelta.com/post/2018/04/23/unity-journal-5-shaders/</link><pubDate>Mon, 23 Apr 2018 23:26:11 -0700</pubDate><guid>https://ninerdelta.com/post/2018/04/23/unity-journal-5-shaders/</guid><description>test</description></item><item><title>Reading Journal 1</title><link>https://ninerdelta.com/post/2018/04/16/reading-journal-1/</link><pubDate>Mon, 16 Apr 2018 22:19:34 -0700</pubDate><guid>https://ninerdelta.com/post/2018/04/16/reading-journal-1/</guid><description>Practice Programming
Practice daily, but perfect practice makes perfect Technologies expire, broader concepts do not (Math, Computer Science, Writing, People skills) More than just programming, includes studying history and theory Use good tools, and master them Make the Best Use of Your Time
Practice everyday Throw the results away, practice is not a project &amp;ldquo;I can make up time&amp;rdquo; is a lie Don&amp;rsquo;t waste time on a problem before getting answers to pressing questions Teach Yourself Programming in 10 Years</description></item><item><title>Unity Journal 4 - native plugins</title><link>https://ninerdelta.com/post/2018/04/10/unity-journal-4-native-plugins/</link><pubDate>Tue, 10 Apr 2018 01:50:15 -0700</pubDate><guid>https://ninerdelta.com/post/2018/04/10/unity-journal-4-native-plugins/</guid><description>Integrating Native iOS code
Create bridge in C Build as framework Unity C# calls into bridge code Pass C# delegate to C as function pointer, allows native to call into C# w/o UnitySendMessage C++ Scripting - part 1
Hooks from C++ into C# via Marshal.GetFunctionPointerForDelegate Handles to managed types (e.g. GameObject) enables more sophisticated usage In a way, Unity/C# becomes implementation of a C++ interface Native UI Overlay for Unity (Android)</description></item><item><title>Unity Journal 3 - best practices, software engineering</title><link>https://ninerdelta.com/post/2018/01/29/unity-journal-3-best-practices-software-engineering/</link><pubDate>Mon, 29 Jan 2018 22:11:59 -0800</pubDate><guid>https://ninerdelta.com/post/2018/01/29/unity-journal-3-best-practices-software-engineering/</guid><description>50 Tips and Best Practices
Learn to use coroutines effectively parallel, series, custom Avoid using different idioms to do the same thing Use singletons for convenience mainly useful for &amp;ldquo;manager&amp;rdquo; objects define static properties &amp;amp; methods to enable &amp;ldquo;Manager.player&amp;rdquo; and avoid having to use &amp;ldquo;Manager.Instance.player&amp;rdquo; Learn how to use debugging facilities effectively Make use of third party extensions as well Automated Build Pipeline Case Study - GoodbyeWorld Games</description></item><item><title>Unity Journal 2 - C#, .NET, IL2CPP</title><link>https://ninerdelta.com/post/2018/01/22/unity-journal-2-c#-.net-il2cpp/</link><pubDate>Mon, 22 Jan 2018 22:03:58 -0800</pubDate><guid>https://ninerdelta.com/post/2018/01/22/unity-journal-2-c#-.net-il2cpp/</guid><description>What is Managed and Unmanaged Code?
Managed code runs in the Common Language Runtime (CLR) and compiles to an intermediate language (IL) Unmanaged is outside the CLR, and compile directly to native machine code Unity Scripting Backend
Replacing Mono with in house .NET runtime IL2CPP Generates C++ source code from assemblies, then relies on existing C++ compilers to create native binaries Virtual Machine (VM) provides extra such as Garbage Collection (GC), metadata, and platform specific resources Leverages existing compilers and removes effort in porting Mono to every platform IL2CPP will fast forward Unity to modern .</description></item><item><title>Unity Journal 1 - serialization, git, ScriptableObjects</title><link>https://ninerdelta.com/post/2018/01/13/unity-journal-1-serialization-git-scriptableobjects/</link><pubDate>Sat, 13 Jan 2018 13:24:48 -0800</pubDate><guid>https://ninerdelta.com/post/2018/01/13/unity-journal-1-serialization-git-scriptableobjects/</guid><description>How to Git with Unity
Configure .gitignore Relevent Unity Editor settings Setup Git Large File Storage (LFS) Unity Tutorials - Intro to Scriptable Objects
Can be used without attaching to a GameObject Saved as assets (good for version control!) Helps with memory management by storing references to data instead of copies Unity Blog - Making cool stuff with ScriptableObjects
Asset to hold custom data, or execute code Enables a very &amp;ldquo;pluggable architecture&amp;rdquo; Unity is a C++ engine with a .</description></item></channel></rss>